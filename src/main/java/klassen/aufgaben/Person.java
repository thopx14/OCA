package main.java.klassen.aufgaben;

import java.util.Objects;

public class Person {

    private String prename;
    private String surname;
    private int yearOfBirth;
    private int zipCode;
    private Gender gender = Gender.DIVERS;

    /*
    This constructor takes all arguments.
     */
    public Person( String prename, String surname, int yearOfBirth, int zipCode, Gender gender ) {
        this.prename = prename;
        this.surname = surname;
        this.yearOfBirth = yearOfBirth;
        this.zipCode = zipCode;
        this.gender = gender;
    }

    /*
    Create non-arg constructor that initialize all private fields with empty standard values.
     */
    public Person() {
        // super();                       --> generated by compiler!
        // this( "", "", 0, 0, null );    --> generated by compiler! In case Gender != null.
    }

    //=== Setter ===
    public void setPrename( String prename ) {

        this.prename = Objects.requireNonNull( prename );
    }

    public void setSurname( String surname ) {

        this.surname = Objects.requireNonNull( surname );
    }

    public void setYearOfBirth( int yob ) {

        this.yearOfBirth = Math.max( yob, 0 );
    }

    public void setZipCode( int zip ) {

        this.zipCode = Math.max( zip, 0 );
    }

    public void setGender( Gender gender ) {
        if ( gender != null )
            this.gender = gender;
    }
    //=== End of Setter ===

    // === Getter ===

    public String getPrename() {
        return prename;
    }

    public String getSurname() {
        return surname;
    }

    public int getYearOfBirth() {
        return yearOfBirth;
    }

    public int getZipCode() {
        return zipCode;
    }

    public Gender getGender() {
        return gender;
    }


    //=== End of Getter ===

    @Override
    public boolean equals( Object o ) {
        boolean isEqual = false;
        if ( o instanceof Person p ) {
            return Objects.equals( p.surname, this.surname ) &&
                    Objects.equals( p.prename, this.prename ) &&
                    p.yearOfBirth == this.yearOfBirth &&
                    p.zipCode == this.zipCode;
        }
        return isEqual;
    }


    @Override
    public String toString() {
        return "Person{" +
                "prename='" + prename + '\'' +
                ", surname='" + surname + '\'' +
                ", yearOfBirth=" + yearOfBirth +
                ", zipCode=" + zipCode +
                ", gender=" + gender +
                '}';
    }

    public static Person getMustermann() {

        return new Person( "Max", "Mustermann", 1960, 12345, Gender.MALE );
    }


}
